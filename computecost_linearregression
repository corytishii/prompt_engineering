<-- */ Completing the Compute Cost Using Linear Regression \*-->
# UNQ_C1
# GRADED FUNCTION: compute_cost

def compute_cost(x, y, w, b): 
    """
    Computes the cost function for linear regression.
    
    Args:
        x (ndarray): Shape (m,) Input to the model (Population of cities) 
        y (ndarray): Shape (m,) Label (Actual profits for the cities)
        w, b (scalar): Parameters of the model
    
    Returns
        total_cost (float): The cost of using w,b as the parameters for linear regression
               to fit the data points in x and y
    """
    # number of training examples
    m = x.shape[0] 
    
    # Initialize the sum of squared errors
    print("Initializing cost_sum...")
    cost_sum = 0  # Make sure this line is executed
    
    # You need to return this variable correctly
    total_cost = 0
    
        ### START MY CODE HERE ###  
        # Loop over training examples
    for i in range(m):
        # Compute the model's prediction f_wb for the ith example
        f_wb = w * x[i] + b
        
        # Compute the cost for the ith example (squared error)
        cost = (f_wb - y[i]) ** 2
        
        # Debugging prints
        print(f"Iteration {i}: f_wb = {f_wb}, y[{i}] = {y[i]}, cost = {cost}")
        
        # Add the cost to the total sum of costs
        cost_sum += cost

    # Calculate the total cost by dividing the accumulated cost by (2 * m)
    total_cost = (1 / (2 * m)) * cost_sum
    print(f"Final total_cost: {total_cost}")
    ### END MY CODE HERE ### 

    return total_cost

<-- */ Tested my implementation using the following code below \*-->
# Compute cost with some initial values for paramaters w, b
initial_w = 2
initial_b = 1

cost = compute_cost(x_train, y_train, initial_w, initial_b)
print(type(cost))
print(f'Cost at initial w: {cost:.3f}')

# Public tests
from public_tests import *
compute_cost_test(compute_cost)
